{"ast":null,"code":"var _jsxFileName = \"/Users/edgarcobos/Desktop/flask/sensor-management-app/src/SensorList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport OfflineSensors from './OfflineSensors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorList = () => {\n  _s();\n  const [sensors, setSensors] = useState([]);\n  const [offlineSensors, setOfflineSensors] = useState([]);\n  const [updateFormData, setUpdateFormData] = useState({\n    sensorId: '',\n    timestamp: '',\n    value: ''\n  });\n  useEffect(() => {\n    // Fetch sensor data from Flask backend\n    axios.get('http://localhost:5000/').then(response => {\n      const allSensors = response.data;\n      const offlineSensors = Object.values(allSensors).filter(sensor => sensor.historical_data && (sensor.historical_data.value < 0 || sensor.historical_data.value > 4));\n      const offlineSensorsData = Object.values(allSensors).map(sensor => {\n        const filteredHistoricalData = sensor.historical_data ? sensor.historical_data.filter(row => row.value < 0 || row.value > 4) : [];\n        return {\n          ...sensor,\n          historical_data: filteredHistoricalData\n        };\n      });\n      setSensors(allSensors);\n      setOfflineSensors(offlineSensorsData);\n      console.log(offlineSensors);\n    }).catch(error => console.error('Error fetching sensors:', error));\n  }, []);\n  const handleUpdate = (sensorId, timestamp, value) => {\n    // Set initial values for the update form\n    setUpdateFormData({\n      sensorId,\n      timestamp,\n      value\n    });\n  };\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUpdateFormData({\n      ...updateFormData,\n      [name]: value\n    });\n  };\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    // Your update logic goes here\n    const {\n      sensorId,\n      timestamp,\n      value\n    } = updateFormData;\n\n    // You can use axios.post or axios.put to send data to your Flask backend\n    // Example: axios.patch(`http://localhost:5000/Sensors/${sensorId}`, { timestamp, value });\n\n    // After submitting, clear the form data\n    setUpdateFormData({\n      sensorId: '',\n      timestamp: '',\n      value: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sensor Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Object.keys(sensors).map(sensorId => {\n          const sensor = sensors[sensorId];\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: sensor.historical_data !== null && sensor.historical_data.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.serialnum\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [(updateFormData.sensorId !== sensorId || updateFormData.timestamp !== row.timestamp) && /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdate(sensorId, row.timestamp, row.value),\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 27\n                }, this), updateFormData.sensorId === sensorId && updateFormData.timestamp === row.timestamp && /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: e => handleFormSubmit,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    step: \"0.1\",\n                    name: \"value\",\n                    value: updateFormData.value,\n                    onChange: handleFormChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 90,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 23\n              }, this)]\n            }, row.serialnum, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this))\n          }, sensorId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/offline-sensors\",\n      children: \"View Offline Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OfflineSensors, {\n      offlineSensors: offlineSensors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorList, \"KVik8GCRxPK0RF63Zsw5evC3KZo=\");\n_c = SensorList;\nexport default SensorList;\nvar _c;\n$RefreshReg$(_c, \"SensorList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Link","OfflineSensors","jsxDEV","_jsxDEV","SensorList","_s","sensors","setSensors","offlineSensors","setOfflineSensors","updateFormData","setUpdateFormData","sensorId","timestamp","value","get","then","response","allSensors","data","Object","values","filter","sensor","historical_data","offlineSensorsData","map","filteredHistoricalData","row","console","log","catch","error","handleUpdate","handleFormChange","e","name","target","handleFormSubmit","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","Fragment","serialnum","onClick","onSubmit","type","step","onChange","to","_c","$RefreshReg$"],"sources":["/Users/edgarcobos/Desktop/flask/sensor-management-app/src/SensorList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport OfflineSensors from './OfflineSensors';\n\nconst SensorList = () => {\n  const [sensors, setSensors] = useState([]);\n  const [offlineSensors, setOfflineSensors] = useState([]);\n  const [updateFormData, setUpdateFormData] = useState({ sensorId: '', timestamp: '', value: '' });\n\n  useEffect(() => {\n      // Fetch sensor data from Flask backend\n      axios.get('http://localhost:5000/')\n        .then(response => {\n          const allSensors = response.data;\n          const offlineSensors = Object.values(allSensors).filter(sensor => (\n            sensor.historical_data &&\n            (sensor.historical_data.value < 0 || sensor.historical_data.value > 4)\n          ));\n          const offlineSensorsData = Object.values(allSensors).map(sensor => {\n            const filteredHistoricalData = sensor.historical_data\n              ? sensor.historical_data.filter(row => row.value < 0 || row.value > 4)\n              : [];\n          \n            return {\n              ...sensor,\n              historical_data: filteredHistoricalData,\n            };\n          });\n          setSensors(allSensors);\n          setOfflineSensors(offlineSensorsData);\n          console.log(offlineSensors);\n        })\n        .catch(error => console.error('Error fetching sensors:', error));\n  }, []);\n\n  const handleUpdate = (sensorId, timestamp, value) => {\n    // Set initial values for the update form\n    setUpdateFormData({ sensorId, timestamp, value });\n  };\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setUpdateFormData({ ...updateFormData, [name]: value });\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    // Your update logic goes here\n    const { sensorId, timestamp, value } = updateFormData;\n\n    // You can use axios.post or axios.put to send data to your Flask backend\n    // Example: axios.patch(`http://localhost:5000/Sensors/${sensorId}`, { timestamp, value });\n\n    // After submitting, clear the form data\n    setUpdateFormData({ sensorId: '', timestamp: '', value: '' });\n  };\n\n  return (\n    <div>\n      {/* ... existing code ... */}\n      <h1>Sensor Management System</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Value</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(sensors).map(sensorId => {\n            const sensor = sensors[sensorId];\n            return (\n              <React.Fragment key={sensorId}>\n                {sensor.historical_data !== null && (\n                  sensor.historical_data.map(row => (\n                    <tr key={row.serialnum}>\n                      <td>{row.serialnum}</td>\n                      <td>{row.timestamp}</td>\n                      <td>{row.value}</td>\n                      <td>\n                        {(updateFormData.sensorId !== sensorId || updateFormData.timestamp !== row.timestamp) && (\n                          <button onClick={() => handleUpdate(sensorId, row.timestamp, row.value)}>Update</button>\n                        )}\n                        {/* Update Form */}\n                        {updateFormData.sensorId === sensorId && updateFormData.timestamp === row.timestamp && (\n                          <form onSubmit={(e) => handleFormSubmit}>\n                            <input type=\"number\" step=\"0.1\" name=\"value\" value={updateFormData.value} onChange={handleFormChange}/>\n                            <button type=\"submit\">Submit</button>\n                          </form>\n                        )}\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </React.Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {/* Link to the Offline Sensors page */}\n      <Link to=\"/offline-sensors\">View Offline Sensors</Link>\n\n      {/* Offline Sensors */}\n      <OfflineSensors offlineSensors={offlineSensors} />\n    </div>\n  );\n};\n\nexport default SensorList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}