{"ast":null,"code":"var _jsxFileName = \"/Users/edgarcobos/Desktop/flask/sensor-management-app/src/SensorList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport OfflineSensors from './OfflineSensors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SensorList = () => {\n  _s();\n  const [sensors, setSensors] = useState([]);\n  const [updateFormData, setUpdateFormData] = useState({\n    sensorId: '',\n    timestamp: '',\n    value: ''\n  });\n  useEffect(() => {\n    // Fetch sensor data from Flask backend\n    axios.get('http://localhost:5000/').then(response => setSensors(response.data)).catch(error => console.error('Error fetching sensors:', error));\n  }, []);\n  const handleUpdate = (sensorId, timestamp, value) => {\n    // Set initial values for the update form\n    setUpdateFormData({\n      sensorId,\n      timestamp,\n      value\n    });\n  };\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setUpdateFormData({\n      ...updateFormData,\n      [name]: value\n    });\n  };\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    // Your update logic goes here\n    const {\n      sensorId,\n      timestamp,\n      value\n    } = updateFormData;\n\n    // You can use axios.post or axios.put to send data to your Flask backend\n    // Example: axios.patch(`http://localhost:5000/Sensors/${sensorId}`, { timestamp, value });\n\n    // After submitting, clear the form data\n    setUpdateFormData({\n      sensorId: '',\n      timestamp: '',\n      value: ''\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Sensor Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Object.keys(sensors).map(sensorId => {\n          const sensor = sensors[sensorId];\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: sensor.historical_data !== null && sensor.historical_data.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.serialnum\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: row.value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [(updateFormData.sensorId !== sensorId || updateFormData.timestamp !== row.timestamp) && /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdate(sensorId, row.timestamp, row.value),\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 27\n                }, this), updateFormData.sensorId === sensorId && updateFormData.timestamp === row.timestamp && /*#__PURE__*/_jsxDEV(\"form\", {\n                  onSubmit: e => handleFormSubmit,\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"number\",\n                    step: \"0.1\",\n                    name: \"value\",\n                    value: updateFormData.value,\n                    onChange: handleFormChange\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 70,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    children: \"Submit\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 23\n              }, this)]\n            }, row.serialnum, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 21\n            }, this))\n          }, sensorId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/offline-sensors\",\n      children: \"View Offline Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OfflineSensors, {\n      offlineSensors: offlineSensors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(SensorList, \"YErEmCMBSKIehANw7QdN+MJNKWc=\");\n_c = SensorList;\nexport default SensorList;\nvar _c;\n$RefreshReg$(_c, \"SensorList\");","map":{"version":3,"names":["React","useState","useEffect","axios","Link","OfflineSensors","jsxDEV","_jsxDEV","SensorList","_s","sensors","setSensors","updateFormData","setUpdateFormData","sensorId","timestamp","value","get","then","response","data","catch","error","console","handleUpdate","handleFormChange","e","name","target","handleFormSubmit","preventDefault","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","sensor","Fragment","historical_data","row","serialnum","onClick","onSubmit","type","step","onChange","to","offlineSensors","_c","$RefreshReg$"],"sources":["/Users/edgarcobos/Desktop/flask/sensor-management-app/src/SensorList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport OfflineSensors from './OfflineSensors';\n\nconst SensorList = () => {\n  const [sensors, setSensors] = useState([]);\n  const [updateFormData, setUpdateFormData] = useState({ sensorId: '', timestamp: '', value: '' });\n\n  useEffect(() => {\n      // Fetch sensor data from Flask backend\n      axios.get('http://localhost:5000/')\n        .then(response => setSensors(response.data))\n        .catch(error => console.error('Error fetching sensors:', error));\n  }, []);\n\n  const handleUpdate = (sensorId, timestamp, value) => {\n    // Set initial values for the update form\n    setUpdateFormData({ sensorId, timestamp, value });\n  };\n\n  const handleFormChange = (e) => {\n    const { name, value } = e.target;\n    setUpdateFormData({ ...updateFormData, [name]: value });\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n    // Your update logic goes here\n    const { sensorId, timestamp, value } = updateFormData;\n\n    // You can use axios.post or axios.put to send data to your Flask backend\n    // Example: axios.patch(`http://localhost:5000/Sensors/${sensorId}`, { timestamp, value });\n\n    // After submitting, clear the form data\n    setUpdateFormData({ sensorId: '', timestamp: '', value: '' });\n  };\n\n  return (\n    <div>\n      {/* ... existing code ... */}\n      <h1>Sensor Management System</h1>\n      <table>\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>Name</th>\n            <th>Value</th>\n            <th>Action</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(sensors).map(sensorId => {\n            const sensor = sensors[sensorId];\n            return (\n              <React.Fragment key={sensorId}>\n                {sensor.historical_data !== null && (\n                  sensor.historical_data.map(row => (\n                    <tr key={row.serialnum}>\n                      <td>{row.serialnum}</td>\n                      <td>{row.timestamp}</td>\n                      <td>{row.value}</td>\n                      <td>\n                        {(updateFormData.sensorId !== sensorId || updateFormData.timestamp !== row.timestamp) && (\n                          <button onClick={() => handleUpdate(sensorId, row.timestamp, row.value)}>Update</button>\n                        )}\n                        {/* Update Form */}\n                        {updateFormData.sensorId === sensorId && updateFormData.timestamp === row.timestamp && (\n                          <form onSubmit={(e) => handleFormSubmit}>\n                            <input type=\"number\" step=\"0.1\" name=\"value\" value={updateFormData.value} onChange={handleFormChange}/>\n                            <button type=\"submit\">Submit</button>\n                          </form>\n                        )}\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </React.Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {/* Link to the Offline Sensors page */}\n      <Link to=\"/offline-sensors\">View Offline Sensors</Link>\n\n      {/* Offline Sensors */}\n      <OfflineSensors offlineSensors={offlineSensors} />\n    </div>\n  );\n};\n\nexport default SensorList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}