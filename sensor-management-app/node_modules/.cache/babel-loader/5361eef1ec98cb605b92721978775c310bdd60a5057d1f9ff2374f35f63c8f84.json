{"ast":null,"code":"var _jsxFileName = \"/Users/edgarcobos/Desktop/flask/sensor-management-app/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport SensorList from './SensorList';\nimport OfflineSensors from './OfflineSensors';\nimport AddSensor from './AddSensor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [sensors, setSensors] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/sensors');\n        setSensors(response.data);\n      } catch (error) {\n        console.error('Error fetching sensors:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleSensorAdded = newSensor => {\n    setSensors(prevSensors => [...prevSensors, newSensor]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [\"path=\\\"/add\\\" render=\", () => /*#__PURE__*/_jsxDEV(AddSensor, {\n          onSensorAdded: handleSensorAdded\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 27\n        }, this), \"/>\", /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/offline-sensors\",\n          element: /*#__PURE__*/_jsxDEV(OfflineSensors, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 51\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(SensorList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jX46rH897G+urM0ad4iJqHW7k0U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","SensorList","OfflineSensors","AddSensor","jsxDEV","_jsxDEV","App","_s","sensors","setSensors","useState","useEffect","fetchData","response","axios","get","data","error","console","handleSensorAdded","newSensor","prevSensors","className","children","onSensorAdded","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["/Users/edgarcobos/Desktop/flask/sensor-management-app/src/App.js"],"sourcesContent":["import './App.css';\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport SensorList from './SensorList';\nimport OfflineSensors from './OfflineSensors';\nimport AddSensor from './AddSensor';\n\nfunction App() {\n  const [sensors, setSensors] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/sensors');\n        setSensors(response.data);\n      } catch (error) {\n        console.error('Error fetching sensors:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleSensorAdded = (newSensor) => {\n    setSensors((prevSensors) => [...prevSensors, newSensor]);\n  };\n  \n  return (\n    <div className=\"App\">\n      <Router>\n        <Routes>\n            path=\"/add\"\n            render={() => <AddSensor onSensorAdded={handleSensorAdded} />}\n          />\n          <Route path=\"/offline-sensors\" element={<OfflineSensors />} />\n          <Route path=\"/\" element={<SensorList />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,+BAA+B,CAAC;QACjEN,UAAU,CAACI,QAAQ,CAACG,IAAI,CAAC;MAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,iBAAiB,GAAIC,SAAS,IAAK;IACvCX,UAAU,CAAEY,WAAW,IAAK,CAAC,GAAGA,WAAW,EAAED,SAAS,CAAC,CAAC;EAC1D,CAAC;EAED,oBACEf,OAAA;IAAKiB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBlB,OAAA,CAACP,MAAM;MAAAyB,QAAA,eACLlB,OAAA,CAACN,MAAM;QAAAwB,QAAA,GAAC,uBAEG,EAAC,mBAAMlB,OAAA,CAACF,SAAS;UAACqB,aAAa,EAAEL;QAAkB;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EAAC,IAEhE,eAAAvB,OAAA,CAACL,KAAK;UAAC6B,IAAI,EAAC,kBAAkB;UAACC,OAAO,eAAEzB,OAAA,CAACH,cAAc;YAAAuB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAC9DvB,OAAA,CAACL,KAAK;UAAC6B,IAAI,EAAC,GAAG;UAACC,OAAO,eAAEzB,OAAA,CAACJ,UAAU;YAAAwB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAE;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACrB,EAAA,CAjCQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAmCZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}