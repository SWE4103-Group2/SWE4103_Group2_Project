{"ast":null,"code":"var _jsxFileName = \"/Users/edgarcobos/Desktop/flask/sensor-management-app/src/OfflineSensors.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OfflineSensors = () => {\n  _s();\n  const [offlineSensors, setOfflineSensors] = useState({});\n  useEffect(() => {\n    // Fetch sensor data from Flask backend\n    axios.get('http://localhost:5000/').then(response => {\n      const allSensors = response.data;\n      const offlineSensors = Object.values(allSensors).map(sensor => {\n        let filteredHistoricalData = [];\n        if (sensor.type === 'Energy') {\n          filteredHistoricalData = sensor.historical_data ? sensor.historical_data.filter(row => row.value < 0 || row.value > 50) : [];\n        } else if (sensor.type === 'Water') {\n          filteredHistoricalData = sensor.historical_data ? sensor.historical_data.filter(row => row.value < 0 || row.value > 4) : [];\n        }\n        return {\n          ...sensor,\n          historical_data: filteredHistoricalData\n        };\n      });\n      setOfflineSensors(offlineSensors);\n    }).catch(error => console.error('Error fetching sensors:', error));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Offline Sensors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: Object.values(offlineSensors).map(sensor => sensor.historical_data.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [\"Serial Number: \", sensor.serial_number]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [\"Status: \", sensor.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: sensor.historical_data.map(row => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"Timestamp: \", row.timestamp]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 35\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [\"Value: \", row.value]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 35\n              }, this)]\n            }, row.timestamp, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 31\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 27\n          }, this)]\n        }, sensor.serial_number, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(OfflineSensors, \"CmoyG72oyjrqe3eBMF2tfX0Mung=\");\n_c = OfflineSensors;\nexport default OfflineSensors;\nvar _c;\n$RefreshReg$(_c, \"OfflineSensors\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","OfflineSensors","_s","offlineSensors","setOfflineSensors","get","then","response","allSensors","data","Object","values","map","sensor","filteredHistoricalData","type","historical_data","filter","row","value","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","serial_number","status","timestamp","_c","$RefreshReg$"],"sources":["/Users/edgarcobos/Desktop/flask/sensor-management-app/src/OfflineSensors.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst OfflineSensors = () => {\n    const [offlineSensors, setOfflineSensors] = useState({});\n\n    useEffect(() => {\n        // Fetch sensor data from Flask backend\n        axios.get('http://localhost:5000/')\n          .then(response => {\n            const allSensors = response.data;\n            const offlineSensors = Object.values(allSensors).map(sensor => {\n              let filteredHistoricalData = [];\n              if (sensor.type === 'Energy') {\n                filteredHistoricalData = sensor.historical_data\n                  ? sensor.historical_data.filter(row => row.value < 0 || row.value > 50)\n                  : [];\n              }\n              else if (sensor.type === 'Water') {\n                filteredHistoricalData = sensor.historical_data\n                  ? sensor.historical_data.filter(row => row.value < 0 || row.value > 4)\n                  : [];\n              }\n            \n              return {\n                ...sensor,\n                historical_data: filteredHistoricalData,\n              };\n            });\n            setOfflineSensors(offlineSensors);\n          })\n          .catch(error => console.error('Error fetching sensors:', error));\n    }, []);\n\n    return (\n        <div>\n        <h2>Offline Sensors</h2>\n        <table>\n            <tbody>\n              {Object.values(offlineSensors).map(sensor => (\n                  sensor.historical_data.length > 0 && (\n                      <div key={sensor.serial_number}>\n                          <tr>Serial Number: {sensor.serial_number}</tr>\n                          <tr>Status: {sensor.status}</tr>\n                          <tr>\n                          {sensor.historical_data.map(row => (\n                              <div key={row.timestamp}>\n                                  <td>Timestamp: {row.timestamp}</td>\n                                  <td>Value: {row.value}</td>\n                              </div>\n                          ))}\n                          </tr>\n                      </div>\n                  )\n              ))}\n            </tbody>\n        </table>\n        </div>\n    );\n};\n\nexport default OfflineSensors;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}