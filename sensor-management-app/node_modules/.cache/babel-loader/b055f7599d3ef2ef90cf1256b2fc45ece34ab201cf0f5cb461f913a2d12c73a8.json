{"ast":null,"code":"var _jsxFileName = \"/Users/edgarcobos/Desktop/flask/sensor-management-app/src/RealTime.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport firebase from './firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTime = () => {\n  _s();\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch real-time data from Flask backend\n        const response = await axios.get('http://localhost:5000/real-time');\n        console.log(response.data);\n\n        // Sign in anonymously\n        const userCredential = await firebase.auth().signInAnonymously();\n        const user = userCredential.user;\n\n        // Listen for changes in real-time data\n        const ref = firebase.database().ref('/energydata');\n        ref.on('value', snapshot => {\n          const data = snapshot.val();\n          setRealTimeData(data || []);\n          setLoading(false);\n        }, error => {\n          console.error(error);\n          setError('Error fetching real-time data from Firebase');\n          setLoading(false);\n        });\n      } catch (error) {\n        console.error('Error fetching sensors:', error);\n        setError('Error fetching sensors');\n        setLoading(false);\n      }\n    };\n    console.log('RealTime component rendered');\n    fetchData();\n\n    // Cleanup: Unsubscribe from Firebase updates when the component unmounts\n    return () => {\n      const ref = firebase.database().ref('/energydata');\n      ref.off('value');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-time Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"data\",\n      children: Object.values(realTimeData).map((sensorEntry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Timestamp: \", sensorEntry.timestamp, \", Value: \", sensorEntry.value]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTime, \"uzPcLUyPnWNP/ondhfTrzPvm2CI=\");\n_c = RealTime;\nexport default RealTime;\nvar _c;\n$RefreshReg$(_c, \"RealTime\");","map":{"version":3,"names":["React","useEffect","useState","axios","firebase","jsxDEV","_jsxDEV","RealTime","_s","realTimeData","setRealTimeData","loading","setLoading","error","setError","fetchData","response","get","console","log","data","userCredential","auth","signInAnonymously","user","ref","database","on","snapshot","val","off","children","fileName","_jsxFileName","lineNumber","columnNumber","id","Object","values","map","sensorEntry","index","timestamp","value","_c","$RefreshReg$"],"sources":["/Users/edgarcobos/Desktop/flask/sensor-management-app/src/RealTime.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport firebase from './firebase';\n\nconst RealTime = () => {\n  const [realTimeData, setRealTimeData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Fetch real-time data from Flask backend\n        const response = await axios.get('http://localhost:5000/real-time');\n        console.log(response.data);\n\n        // Sign in anonymously\n        const userCredential = await firebase.auth().signInAnonymously();\n        const user = userCredential.user;\n\n        // Listen for changes in real-time data\n        const ref = firebase.database().ref('/energydata');\n        ref.on('value', (snapshot) => {\n          const data = snapshot.val();\n          setRealTimeData(data || []);\n          setLoading(false);\n        }, (error) => {\n          console.error(error);\n          setError('Error fetching real-time data from Firebase');\n          setLoading(false);\n        });\n      } catch (error) {\n        console.error('Error fetching sensors:', error);\n        setError('Error fetching sensors');\n        setLoading(false);\n      }\n    };\n\n    console.log('RealTime component rendered');\n\n    fetchData();\n\n    // Cleanup: Unsubscribe from Firebase updates when the component unmounts\n    return () => {\n      const ref = firebase.database().ref('/energydata');\n      ref.off('value');\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Real-time Data</h1>\n      {loading && <p>Loading...</p>}\n      {error && <p>Error: {error}</p>}\n      <div id=\"data\">\n        {Object.values(realTimeData).map((sensorEntry, index) => (\n          <div key={index}>\n            Timestamp: {sensorEntry.timestamp}, Value: {sensorEntry.value}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RealTime;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}